sandbox.txt 0.0.2                     UTF-8                     dh:2015-12-10

          <https://github.com/orcmid/DocInterop>
                 /DocInterop/ODF/substrate/xml/sandbox/sandbox.txt>

                      OPEN DOCUMENT FORMAT XML SANDBOX
                      ================================

          DOCUMENT INTEROPERABILITY ASSESSMENT/ASSURANCE BOOTSTRAP

    This sandbox/ is used to develop experimental tests for the XML substrate
    without having any fully-formed idea of how to package the material or
    completely describe its usage.

    There is no permanent organization.  Sandbox material comes and goes.

    This will impact the Git repository and its history during the boot-
    strapping effort.  At some point, a kind of database organization
    may emerge that supplants this.  It will then be less clear whether
    Git is the document-management approach of choice.


 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                       Copyright 2015 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

TODO

 * Make an absolute minimum XML document for an ODF text document.  This is
   a basic, anyone who accepts these should accept this document.

 * Work XML variations on this document with respect to different features:

   * comments and comment violations.  We need comments to work from the
     beginning.

   * We need to look at XML prologue cases.

   * Consider internal DTDs for character-entity definitions as an example.

   * Test at least three charset cases, including one non-Unicode compatible.

   * For those accepted, determine what is produced, if single XML files
     are producible.

   * Work through namespace binding variations, with simple cases of correct,
     incorrect ODF binding cases, use of defaults, attribute differences, etc.

   * Have a document with simple text-content sequence and nothing else

   * Do not get into formatting, but look into Unicode character variation a
     little, both in QNames and in text content.

   * Do a little about what XML says about spaces, line-breaks, etc., but do
     not deal with the ODF flavors for that.  Consider Unicode version and
     related impacts, especially where text-content is dealt-with/parsed.

   * Consider simple extension cases in text-content.

   * It may not be possible to do any xml:id cases at this level.  Determine
     that when looking through the schemas.

 * Difference between ODF 1.1 and 1.2 recognition should be demonstrated,
   * specific version and no version
   * extension optionality attributes
   * how flattening does or does not work
   * tie to some sort of profile on extension handling

 * Figure out what kind of (source-tree) manifest should be here, if any.

 * Distinguish Flat ODF documents (.fods, .fodt, .fodp, .fodg).

   * Distinguish those that can be mapped directly to content.xml and multiple
     pachage forms

   * Deal with the fact that these ODF document files are single XML documents
     and there is no registration of these extension names as preferred.  It
     is an OpenOffice convention and must be at that level of profile.

   * Use a naming convention that allows the cases to be translated easily to
     use as content.xml (or more) in some packaged case.

   * Flat ODF documents are the ODF counterpart of RTF, except under the
     single schema that applies to all ODF documents files, however they are
     packaged.

 * Distinguish OpenOffice practices versus what the ODF specifications
   differentiate.

 * Provide cases for other implementations that might or might not honor the
   OpenOffice (informal) profile.

 * Confirm that Apache OpenOffice does not support Flat ODF document files in
   any manner.  This becomes a profile issue also.

 * Elevate these to substrate as the approach takes shape and we have some
   test assertions, identified test cases, and assessment trials

 * The first, simplest case over, is dead-simple-content.fodt

 * Is an accession-numbering system and cataloguing needed?  It would seem
   so.

 * Does identification have to be structured or can it be sort of fixed-
   size as in the IEEE assembly/component scheme?  I am favoring this.  On
   reflection, there is also the question of tying to the specification,
   and that also means tying to test assertions.  This need not be purely-
   hierarchical and it could also be multi-way.

 * Time to dig into the test-assertion model and figure out some versionable
   initial customization.  The initial sandbox cases should be helpful in
   figuring that out.

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 0.0.2 2015-12-10-07:41 Consider Durable Role of the Sandbox
       Such folders matter for the history of this undertaking and its
       boot-strapping.  They may become a burden on the ultimate repository
       of tests and assessment procedures.  Time to consider that after
       getting a concrete start.
 0.0.1 2015-08-25-05:21 Add Work Items
       Elaborate more needed in the XML substrate and to be distinguished,
       especially the Float ODF document files that are single XML documents
       and not in Zip packages.

 0.0.0 2015-08-14-16:17 Establish initial xml folder note and start
       a list of TODO items/notes.

                         *** end of sandbox.txt ***